import config
import core
import telebot
from telebot import types
import markup
import sys
from telebot import apihelper
import requests
from io import BytesIO
from PIL import Image
import pymysql
from core import get_all_items
import market_admin
from telebot.types import LabeledPrice

bot = telebot.TeleBot(config.TOKEN, skip_pending=True)

def edit_products(message):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get categories
    cur.execute("SELECT id, name FROM categories")
    categories = cur.fetchall()
    messagetext1 = f"""
        <b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏—é:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    """
    if categories:
        # Create inline keyboard with categories
        keyboard = telebot.types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(telebot.types.InlineKeyboardButton(text=category[1], callback_data=f"categoryedit_{category[0]}"))

        # Send message with categories
        bot.send_message(message.chat.id, text=messagetext1, reply_markup=keyboard, parse_mode="HTML")
    else:
        # If there are no categories, send error message
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    cur.close()
    con.close()


# Callback function for category selection
@bot.callback_query_handler(func=lambda call: call.data.startswith("categoryedit_"))
def view_category_products_edit(call):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get category id from callback data
    category_id = int(call.data.split("_")[1])

    # Get products in selected category
    cur.execute("SELECT id, name_tovar, price, kolvo, file_id, file_name, type FROM market WHERE category_id=%s", category_id)
    products = cur.fetchall()
    messagetext = f"""
    <b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    """
    if products:
        # Create inline keyboard with products
        keyboard = telebot.types.InlineKeyboardMarkup()
        for product in products:
            keyboard.add(telebot.types.InlineKeyboardButton(text=product[1], callback_data=f"productedit_{product[0]}_{category_id}"))

        # Add "–ù–∞–∑–∞–¥" button to return to categories selection
        keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_categories_edit"))

        # Send message with products and store category id in callback data
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messagetext, reply_markup=keyboard, parse_mode="HTML")
    else:
        # If there are no products in selected category, send error message
        bot.answer_callback_query(callback_query_id=call.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories_edit")
def back_to_categories_edit(call):
    edit_products(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("productedit_"))
def view_product_edit(call):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get product id and category id from callback data
    product_id, category_id = map(int, call.data.split("_")[1:])

    # Get product information
    cur.execute("""
        SELECT m.name_tovar, m.price, m.kolvo, m.file_id, m.file_name, m.type, m.opisanie, m.photo, c.name
        FROM market m
        JOIN categories c ON m.category_id = c.id
        WHERE m.id = %s
    """, product_id)
    product = cur.fetchone()
    if product:
        # Create message with product information
        message =f"""
        <b>üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{product[0]}</code>
üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{product[8]}</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{product[1]}‚ÇΩ</code>
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{product[2]}—à—Ç</code>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{product[6]}</b>
        """
        # message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product[0]}\n–¶–µ–Ω–∞: {product[1]} —Ä—É–±.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product[2]}"
        
        # Create inline keyboard with download button and back button
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboarditem1 = (telebot.types.InlineKeyboardButton(text="üè∑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ ", callback_data=f"edit_name_{product_id}"))
        keyboarditem2 = (telebot.types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É ", callback_data=f"edit_price_{product_id}"))
        keyboarditem3 = (telebot.types.InlineKeyboardButton(text="üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ", callback_data=f"edit_quantity_{product_id}"))
        keyboarditem4 = (telebot.types.InlineKeyboardButton(text="üìÉ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ", callback_data=f"edit_opisanie_{product_id}"))
        keyboarditem5 = (telebot.types.InlineKeyboardButton(text="üóÇ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª ", callback_data=f"edit_file_{product_id}"))
        keyboarditem6 = (telebot.types.InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ ", callback_data=f"edit_photo_{product_id}"))
        keyboard.row(keyboarditem1, keyboarditem2)
        keyboard.row(keyboarditem3, keyboarditem4)
        keyboard.row(keyboarditem5, keyboarditem6)
        chat_id = call.message.chat.id
        bot.send_photo(chat_id,  product[7], caption=message, reply_markup=keyboard, parse_mode="HTML")

    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_file_"))
def edit_product_file(call):
    product_id = int(call.data.split("_")[2])
    bot.send_message(call.message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_file, product_id)


def handle_new_product_file(message, product_id):
    new_file = message.document.file_id
    new_file_name = message.document.file_name
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET file_id = %s, file_name = %s WHERE id = %s", (new_file, new_file_name, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–§–∞–π–ª —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_photo_"))
def edit_product_photo(call):
    product_id = int(call.data.split("_")[2])
    bot.send_message(call.message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_photo, product_id)


def handle_new_product_photo(message, product_id):
    new_photo = message.photo[-1].file_id
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET photo = %s WHERE id = %s", (new_photo, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_opisanie_"))
def edit_product_opisanie(call):
    product_id = int(call.data.split("_")[2])
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_opisanie, product_id)


def handle_new_product_opisanie(message, product_id):
    new_opisanie = message.text
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET opisanie = %s WHERE id = %s", (new_opisanie, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_quantity_"))
def edit_product_quantity(call):
    product_id = int(call.data.split("_")[2])
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_quantity, product_id)


def handle_new_product_quantity(message, product_id):
    new_quantity = message.text
    # –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET kolvo = %s WHERE id = %s", (new_quantity, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_price_"))
def edit_product_price(call):
    product_id = int(call.data.split("_")[2])
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_price, product_id)


def handle_new_product_price(message, product_id):
    new_price = message.text
    # –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET price = %s WHERE id = %s", (new_price, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_name_"))
def edit_product_name(call):
    product_id = int(call.data.split("_")[2])
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(call.message, handle_new_product_name, product_id)


def handle_new_product_name(message, product_id):
    new_name = message.text
    # –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("UPDATE market SET name_tovar = %s WHERE id = %s", (new_name, product_id))
    con.commit()
    cur.close()
    con.close()
    bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data == 'find_check')
def find_receipt_number(call):
    # –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞:')
    bot.register_next_step_handler(call.message, find_receipt)

def find_receipt(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    receipt_number = message.text.split()
    result = core.find_recept(receipt_number)
    if result:
        name_tovar = result[1]
        price = result[2]
        file_id = result[3]
        opisanie = result[6]
        receipt_number = result[7]
        user_id = result[8]
        buy_date = result[9]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–∫–µ
        message_check = f"""
        üßæ –ß–µ–∫: <code>{receipt_number}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{user_id}</b>
üéÅ –¢–æ–≤–∞—Ä: <b>{name_tovar}</b>
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1 —à—Ç</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price}‚ÇΩ</code>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{opisanie}</b>
üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{str(buy_date)}</code>
        """

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–∫–µ –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        bot.send_message(message.chat.id, message_check, parse_mode="HTML")
        bot.send_document(message.chat.id, file_id)

    else:
        # –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.send_message(message.chat.id, "–ß–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def popolnenie_balance(message):
    # –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
    bot.register_next_step_handler(message, popolnenie_form)

def popolnenie_form(message):
    user_id = message.from_user.id
    summ = message.text.strip()
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {summ} —Ä—É–±–ª–µ–π\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}"

    prices = [LabeledPrice(label='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', amount=int(summ)*100)]
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        bot.send_invoice(
                            message.chat.id,  #chat_id
                            title = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', #title
                            description = description,
                            invoice_payload = 'HAPPY FRIDAYS COUPON', #invoice_payload
                            provider_token = config.PAYMENTS_TOKEN, #provider_token
                            currency = 'rub', #currency
                            prices = prices, #prices
                            photo_url='https://www.the.willk.in/pictures/logo-mir.png',
                            photo_height=380,
                            photo_width=760,
                            photo_size=760,
                            is_flexible=False,
                            start_parameter='my-bot-example')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫,"
                                                " –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    core.update_balance(user_id=message.from_user.id,  amount=message.successful_payment.total_amount // 100)
    bot.send_message(message.chat.id,
                     f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!" , reply_markup=markup.markup_main())




@bot.callback_query_handler(func=lambda call: call.data == 'give_rub')
def handle_give_balance_callback(call):
    # –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(call.message, handle_give_balance_user_id)

def handle_give_balance_user_id(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.text.strip()
    if core.profile_exists(user_id):
        user_id = int(user_id)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return 
    # –ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:')
    bot.register_next_step_handler(message, handle_give_balance_amount, user_id)

def handle_give_balance_amount(message, user_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    amount = message.text.strip()
    try:
        amount = float(amount)
    except ValueError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.')
        return
    success = core.update_balance(user_id, amount)
    if success:
        bot.send_message(message.chat.id, f"üéâ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.</b>\nüë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{core.get_balance(user_id)}‚ÇΩ</code>", parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.')


def send_profile(message):
    user_id = message.from_user.id
    data = core.user_profile(user_id)

    message_data = f"""
<b>üìá | –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>
üë§ | –ú–æ–π ID:: <code>{data[1]}</code>
üí∏ | –ë–∞–ª–∞–Ω—Å: <code>{data[2]}‚ÇΩ</code>
üõí | –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{data[3]}</code>
"""

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = telebot.types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏" –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    my_purchases_button = telebot.types.InlineKeyboardButton(text="–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")
    keyboard.add(my_purchases_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, text=message_data, parse_mode="HTML", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "my_purchases")
def handle_my_purchases_callback(call):
    user_id = call.from_user.id
    purchased_items = core.get_purchased_items(user_id)

    if purchased_items:
        keyboard = telebot.types.InlineKeyboardMarkup()
        for item in purchased_items:
            keyboard.add(telebot.types.InlineKeyboardButton(text=item, callback_data=f"view_receipt_{item}"))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–∞:", reply_markup=keyboard)
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_receipt_"))
def handle_view_receipt_callback(call):
    receipt_item = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data

    user_id = call.from_user.id
    receipt_info = core.get_receipt_info(user_id, receipt_item)

    if receipt_info:
        receipt_number = receipt_info[0]
        user_id = receipt_info[1]
        name_tovar = receipt_info[2]
        price = receipt_info[3]
        opisanie = receipt_info[4]
        buy_date = receipt_info[5]
        file_id = receipt_info[6]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_check = f"""
        üßæ –ß–µ–∫: <code>{receipt_number}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{user_id}</b>
üéÅ –¢–æ–≤–∞—Ä: <b>{name_tovar}</b>
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1 —à—Ç</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price}‚ÇΩ</code>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{opisanie}</b>
üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{str(buy_date)}</code>
        """

        bot.send_message(call.message.chat.id, text=message_check, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–∞
        bot.send_document(call.message.chat.id, file_id, caption=name_tovar)
    else:
        bot.send_message(call.message.chat.id, "–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def delete_category(message):
    # Connect to the database
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get all categories from the database
    cur.execute("SELECT id, name FROM categories")
    categories = cur.fetchall()

    # Create a keyboard with buttons for each category
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for category in categories:
        callback_data = f"delete_category_id={category[0]}"
        button = types.InlineKeyboardButton(text=category[1], callback_data=callback_data)
        keyboard.add(button)

    # Send a message with the list of categories and buttons
    bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)

    # Close the connection to the database
    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: "delete_category_id" in call.data)
def delete_category_confirmation(call):
    category_id = int(call.data.split("=")[1])

    # Connect to the database
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Delete the category and all products in it
    cur.execute(f"DELETE FROM market WHERE category_id={category_id}")
    cur.execute(f"DELETE FROM categories WHERE id={category_id}")
    
    con.commit()

    # Get updated list of categories
    categories = core.get_categories()

    # Create a new keyboard with updated categories
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for category in categories:
        callback_data = f"delete_category_id={category[0]}"
        button = types.InlineKeyboardButton(text=category[1], callback_data=callback_data)
        keyboard.add(button)

    # Edit the message with updated keyboard
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)

    # Close the connection to the database
    cur.close()
    con.close()
def delete_product(message):
    # Connect to the database
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Select all categories
    cur.execute("SELECT id, name FROM categories")
    categories = cur.fetchall()

    # Create a message with categories
    categories_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for category in categories:
        callback_data = f"category_id={category[0]}"
        button = types.InlineKeyboardButton(text=category[1], callback_data=callback_data)
        keyboard.add(button)
    bot.send_message(chat_id=message.chat.id, text=categories_message, reply_markup=keyboard)

    # Close the connection to the database
    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: "category_id" in call.data)
def category_selection(call):
    category_id = int(call.data.split("=")[1])
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute(f"SELECT id, name_tovar FROM market WHERE category_id={category_id}")
    products = cur.fetchall()
    if not products:
        bot.answer_callback_query(callback_query_id=call.id, text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    products_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for product in products:
        callback_data = f"delete_product_id={product[0]}"
        button = types.InlineKeyboardButton(text=product[1], callback_data=callback_data)
        keyboard.add(button)
    back_callback_data = f"back_to_categories_delete_tovar"
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=back_callback_data)
    keyboard.add(back_button)
    bot.send_message(chat_id=call.message.chat.id, text=products_message, reply_markup=keyboard)
    cur.close()
    con.close()
@bot.callback_query_handler(func=lambda call: "back_to_categories_delete_tovar" in call.data)
def back_to_categories(call):
    categories = core.get_categories()
    categories_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for category in categories:
        callback_data = f"category_id={category[0]}"
        button = types.InlineKeyboardButton(text=category[1], callback_data=callback_data)
        keyboard.add(button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=categories_message, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(func=lambda call: "delete_product_id" in call.data)
def delete_product_confirm(call):
    # Extract product ID from callback data
    product_id = int(call.data.split("=")[1])

    # Connect to the database
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Delete product from the database
    cur.execute(f"DELETE FROM market WHERE id={product_id}")
    con.commit()

    # Send confirmation message
    bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")

    # Close the connection to the database
    cur.close()
    con.close()


def view_products(message):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get categories
    cur.execute("SELECT id, name FROM categories")
    categories = cur.fetchall()
    messagetext1 = f"""
        <b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏—é:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    """
    if categories:
        # Create inline keyboard with categories
        keyboard = telebot.types.InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(telebot.types.InlineKeyboardButton(text=category[1], callback_data=f"category_{category[0]}"))

        # Send message with categories
        bot.send_message(message.chat.id, text=messagetext1, reply_markup=keyboard, parse_mode="HTML")
    else:
        # If there are no categories, send error message
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    cur.close()
    con.close()


# Callback function for category selection
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def view_category_products(call):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get category id from callback data
    category_id = int(call.data.split("_")[1])

    # Get products in selected category
    cur.execute("SELECT id, name_tovar, price, kolvo, file_id, file_name, type FROM market WHERE category_id=%s", category_id)
    products = cur.fetchall()
    messagetext = f"""
    <b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    """
    if products:
        # Create inline keyboard with products
        keyboard = telebot.types.InlineKeyboardMarkup()
        for product in products:
            keyboard.add(telebot.types.InlineKeyboardButton(text=product[1], callback_data=f"product_{product[0]}_{category_id}"))

        # Add "–ù–∞–∑–∞–¥" button to return to categories selection
        keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_categories"))

        # Send message with products and store category id in callback data
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messagetext, reply_markup=keyboard, parse_mode="HTML")
    else:
        # If there are no products in selected category, send error message
        bot.answer_callback_query(callback_query_id=call.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def back_to_categories(call):
    view_products(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def view_product(call):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get product id and category id from callback data
    product_id, category_id = map(int, call.data.split("_")[1:])

    # Get product information
    cur.execute("""
        SELECT m.name_tovar, m.price, m.kolvo, m.file_id, m.file_name, m.type, m.opisanie, m.photo, c.name
        FROM market m
        JOIN categories c ON m.category_id = c.id
        WHERE m.id = %s
    """, product_id)
    product = cur.fetchone()
    if product:
        # Create message with product information
        message =f"""
        <b>üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{product[0]}</code>
üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{product[8]}</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{product[1]}‚ÇΩ</code>
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{product[2]}—à—Ç</code>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{product[6]}</b>
        """
        # message = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product[0]}\n–¶–µ–Ω–∞: {product[1]} —Ä—É–±.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product[2]}"
        
        # Create inline keyboard with download button and back button
        keyboard = telebot.types.InlineKeyboardMarkup()
        user_id = call.from_user.id
        if str(user_id) == config.ADMIN_ID:
            keyboard.add(telebot.types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"open_file_{product_id}"))
        else:
            keyboard.add(telebot.types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"buy_file_{product_id}"))
        chat_id = call.message.chat.id
        bot.send_photo(chat_id,  product[7], caption=message, reply_markup=keyboard, parse_mode="HTML")

    cur.close()
    con.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_file_"))
def send_file_user(call):
    user_id = call.from_user.id
    product_id = int(call.data.split("_")[2])

    # Get file information from the database
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()
    cur.execute("SELECT file_id, file_name, price, kolvo, type, opisanie, name_tovar FROM market WHERE id=%s", product_id)
    result = cur.fetchone()

    if result:
        file_id = result[0]
        file_name = result[1]
        price = result[2]
        kolvo = result[3]
        typetovar = result[4]
        opisanie = result[5]
        name_tovar = result[6]

        # Check user balance and compare with price
        balance_user = core.get_balance(user_id)
        if float(balance_user) >= float(price):
            # Deduct the price from the user's balance
            

            # Update the quantity of the product
            if kolvo > 0:
                kolvo -= 1
                cur.execute("UPDATE market SET kolvo = %s WHERE id = %s", (kolvo, product_id))
                con.commit()

                # Send the file to the chat
                bot.send_document(call.message.chat.id, file_id, caption=file_name)

                # Generate receipt number
                receipt_number = market_admin.generate_receipt_number()
                buy_date = market_admin.get_date()
                # Insert receipt into the database
                cur.execute("INSERT INTO receipt (name_tovar, price, file_id, file_name, type, opisanie, receipt_number, user_id, buy_date) "
                            "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
                            (name_tovar, price, file_id, file_name, typetovar, opisanie, receipt_number, user_id, buy_date))
                con.commit()
                
                # Send confirmation message with receipt
                message_check = f"""
                        <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üßæ –ß–µ–∫: <code>{receipt_number}</code>
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{user_id}</b>
üéÅ –¢–æ–≤–∞—Ä: <b>{name_tovar}</b>
üì¶ –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: <code>1 —à—Ç</code>
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price}‚ÇΩ</code>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{opisanie}</b>
üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code> {str(buy_date)}</code>
                    """
                bot.send_message(call.message.chat.id, message_check, parse_mode="HTML")
                core.update_balance(user_id, -float(price))
                core.update_purchase_count_user(user_id)
            else:
                # Product is out of stock
                bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
        else:
            # Insufficient balance, send error message
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
    else:
        # Product not found in the database, send error message
        bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    cur.close()
    con.close()




@bot.callback_query_handler(func=lambda call: call.data.startswith("open_file_"))
def send_file(call):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    # Get product id from callback data
    product_id = int(call.data.split("_")[2])

    # Get file_id from the database
    cur.execute("SELECT file_id, file_name FROM market WHERE id=%s", product_id)
    result = cur.fetchone()

    if result:
        # Send the file to the chat
        bot.send_document(call.message.chat.id, result[0], caption=result[1])

    cur.close()
    con.close()

def add_category(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(msg, process_category_name)

def process_category_name(message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category_name = message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_category_to_database(category_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    bot.send_message(message.chat.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

def add_category_to_database(category_name):
    con = pymysql.connect(host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
    cur = con.cursor()

    cur.execute("INSERT INTO categories(name) VALUES(%s)", (category_name,))

    con.commit()

    cur.close()
    con.close()

def add_item(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = core.get_all_categories()
    markups = types.InlineKeyboardMarkup(row_width=1)
    for category in categories:
        button = types.InlineKeyboardButton(text=category[1], callback_data=f"add_item_{category[0]}")
        markups.add(button)
    bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markups)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_item_'))
def add_item_to_category(call):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = int(call.data.split('_')[-1])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    bot.register_next_step_handler(msg, lambda message: add_tovar_price(message, category_id))

def add_tovar_price(message, category_id):
    chat_id = message.chat.id
    name_tovar = message.text.strip()
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:')
    bot.register_next_step_handler(message, add_tovar_kolvo, name_tovar, category_id)

def add_tovar_kolvo(message, name_tovar, category_id):
    chat_id = message.chat.id
    try:
        price = float(message.text.strip().replace(',', '.'))
    except ValueError:
        bot.send_message(chat_id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
    bot.register_next_step_handler(message, add_tovar_description, name_tovar, price, category_id)

def add_tovar_description(message, name_tovar, price, category_id):
    chat_id = message.chat.id
    kolvo = message.text.strip()
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    bot.register_next_step_handler(message, add_tovar_photo, name_tovar, price, category_id, kolvo)

def add_tovar_photo(message, name_tovar, price, category_id, kolvo):
    chat_id = message.chat.id
    opisanie = message.text.strip()
    bot.send_message(chat_id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:')
    bot.register_next_step_handler(message, add_tovar_file, name_tovar, price, category_id, kolvo, opisanie)

def add_tovar_file(message, name_tovar, price, category_id, kolvo, opisanie):
    chat_id = message.chat.id
    photo=message.photo[0].file_id
    bot.send_message(chat_id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞:')
    bot.register_next_step_handler(message, add_tovar_confirm, name_tovar, price, category_id, kolvo, opisanie, photo)


def add_tovar_confirm(message,  name_tovar, price, category_id, kolvo, opisanie, photo):
    chat_id = message.chat.id
    if message.text is not None and (otmena := message.text.strip()) == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_admin())
        return
    if message.document is not None:
        file_id = message.document.file_id
        file_name = message.document.file_name
        file_type = message.document.mime_type
        core.add_file(message.message_id, file_id, file_name, file_type)
        con = pymysql.connect(
            host=config.MySQL[0], user=config.MySQL[1], passwd=config.MySQL[2], db=config.MySQL[3])
        cur = con.cursor()
        cur.execute(
            f"INSERT INTO market (`name_tovar`, `price`, `kolvo`, `file_id`, `file_name`, `type`, `opisanie`, `photo`, `category_id`) VALUES ('{name_tovar}', '{price}', '{kolvo}', '{file_id}', '{file_name}', '{file_type}', '{opisanie}', '{photo}', '{category_id}')")
        con.commit()
        cur.close()
        con.close()
        bot.send_message(
            chat_id, f'‚úÖ –¢–æ–≤–∞—Ä {name_tovar} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.', reply_markup=markup.markup_tovars_admin())
    else:
        bot.send_message(
            chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(
            message, add_tovar_confirm,  name_tovar, price, category_id, kolvo, opisanie, photo)
    return


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if not core.profile_exists(user_id):
        core.create_profile(user_id)
        bot.send_message(message.chat.id, 'üëãüèª –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å</b> –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç!', parse_mode='html')
        bot.send_message(message.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ß—Ç–æ–±—ã –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup.markup_main())
    else:
        bot.send_message(message.chat.id, 'üëãüèª –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å</b> –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç!', parse_mode='html', reply_markup=markup.markup_main())

@bot.message_handler(commands=['agent'])
def agent(message):
    user_id = message.from_user.id

    if core.check_agent_status(user_id) == True: 
        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        take_password_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_password_message, get_password_message)


@bot.message_handler(commands=['admin'])
def admin(message):
    user_id = message.from_user.id

    if str(user_id) == config.ADMIN_ID:
        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', reply_markup=markup.markup_admin())
    else:
        bot.send_message(message.chat.id, 'üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')



@bot.message_handler(content_types=['text'])
def send_text(message):
    user_id = message.from_user.id

    if message.text == '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å':
        take_new_request = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_new_request, get_new_request)

    elif message.text == '‚úâÔ∏è –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã':
        markup_and_value = markup.markup_reqs(user_id, 'my_reqs', '1')
        markup_req = markup_and_value[0]
        value = markup_and_value[1]

        if value == 0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.', reply_markup=markup.markup_main())
        else:
            bot.send_message(message.chat.id, '–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:', reply_markup=markup_req)
    elif message.text == 'üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
        add_item(message)
    elif message.text == 'üéÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤':
        view_products(message)
    elif message.text == 'üóÉ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        add_category(message)
    elif message.text == 'üéÅ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã ‚õîÔ∏è':
        delete_product(message)
    elif message.text == 'üóÉ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚õîÔ∏è':
        delete_category(message)
    elif message.text == 'üéÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä üñç':
        edit_products(message)
    elif message.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        admin(message)
    elif message.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        send_profile(message)
    elif message.text == 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        popolnenie_balance(message)
    elif message.text == 'üéÅ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
        view_products(message)
    else:
        bot.send_message(message.chat.id, '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', parse_mode='html', reply_markup=markup.markup_main())


def get_password_message(message):
    password = message.text
    user_id = message.from_user.id

    if password == None:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)

    elif password.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    elif core.valid_password(password) == True:
        core.delete_password(password)
        core.add_agent(user_id)

        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_main())
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏:', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)


def get_agent_id_message(message):
    agent_id = message.text

    if agent_id == None:
        take_agent_id_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

    elif agent_id.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    else:
        core.add_agent(agent_id)
        bot.send_message(message.chat.id, '‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', reply_markup=markup.markup_main())
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', reply_markup=markup.markup_admin())


def get_new_request(message):
    request = message.text
    user_id = message.from_user.id
    check_file = core.get_file(message)

    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        request = check_file['text']

        if str(request) == 'None':
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–æ–º.', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        else:
            req_id = core.new_req(user_id, request)
            core.add_file(req_id, file_id, file_name, type)

            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥ ID {req_id} —Å–æ–∑–¥–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã</b>', parse_mode='html', reply_markup=markup.markup_main())        
    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    else:
        if request == None:
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–∞–º–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        elif request.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
            return

        else:
            req_id = core.new_req(user_id, request)
            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥ ID {req_id} —Å–æ–∑–¥–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã</b>', parse_mode='html', reply_markup=markup.markup_main())


def get_additional_message(message, req_id, status):
    additional_message = message.text
    check_file = core.get_file(message)
    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        additional_message = check_file['text']

        core.add_file(req_id, file_id, file_name, type)

    if additional_message == None:
        take_additional_message = bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–∞–º–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status)

    elif additional_message.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    else:
        if additional_message != 'None':
            core.add_message(req_id, additional_message, status)

        if check_file != None:
            if additional_message != 'None':
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!'
            else:
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
        else:
            text = '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
        
        bot.send_message(message.chat.id, text, reply_markup=markup.markup_main())

        if status == 'agent':
            user_id = core.get_user_id_of_req(req_id)
            try:
                if additional_message == 'None':
                    additional_message = ''

                bot.send_message(user_id, f'‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å ID {req_id}!\n\nüßë‚Äçüíª –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{additional_message}', reply_markup=markup.markup_main())

                if type == 'photo':
                    bot.send_photo(user_id, photo=file_id, reply_markup=markup.markup_main())
                elif type == 'document':
                    bot.send_document(user_id, document=file_id, reply_markup=markup.markup_main())
                elif type == 'video':
                    bot.send_video(user_id, video=file_id, reply_markup=markup.markup_main())
                elif type == 'audio':
                    bot.send_audio(user_id, audio=file_id, reply_markup=markup.markup_main())
                elif type == 'voice':
                    bot.send_voice(user_id, voice=file_id, reply_markup=markup.markup_main())
                else:
                    bot.send_message(user_id, additional_message, reply_markup=markup.markup_main())
            except:
                pass





@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.message.chat.id

    if call.message:
        if ('my_reqs:' in call.data) or ('waiting_reqs:' in call.data) or ('answered_reqs:' in call.data) or ('confirm_reqs:' in call.data):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è:

            ‚úâÔ∏è –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
            ‚ùóÔ∏è –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏,
            ‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã  
            """

            parts = call.data.split(':')
            callback = parts[0]
            number = parts[1]
            markup_and_value = markup.markup_reqs(user_id, callback, number)
            markup_req = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=markup_req)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:', reply_markup=markup_req)

            bot.answer_callback_query(call.id)

        #–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å
        elif 'open_req:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]

            req_status = core.get_req_status(req_id)
            request_data = core.get_request_data(req_id, callback)
            len_req_data = len(request_data)

            i = 1
            for data in request_data:
                if i == len_req_data:
                    markup_req = markup.markup_request_action(req_id, req_status, callback)
                else:
                    markup_req = None

                bot.send_message(chat_id=call.message.chat.id, text=data, parse_mode='html', reply_markup=markup_req)

                i += 1

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å
        elif 'add_message:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            status_user = parts[2]

            take_additional_message = bot.send_message(chat_id=call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)', reply_markup=markup.markup_cancel())

            bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status_user)

            bot.answer_callback_query(call.id)

        #–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        elif 'confirm_req:' in call.data:
            parts = call.data.split(':')
            confirm_status = parts[1]
            req_id = parts[2]

            if core.get_req_status(req_id) == 'confirm':
                bot.send_message(chat_id=call.message.chat.id, text="‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)

                return
            
            #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if confirm_status == 'wait':
                bot.send_message(chat_id=call.message.chat.id, text="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>", parse_mode='html', reply_markup=markup.markup_confirm_req(req_id))
            
            #–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            elif confirm_status == 'true':
                core.confirm_req(req_id)
                
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=markup.markup_main())
                except:
                    bot.send_message(chat_id=call.message.chat.id, text="‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=markup.markup_main())

                bot.answer_callback_query(call.id)

        #–§–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–∞
        elif 'req_files:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]
            number = parts[3]

            markup_and_value = markup.markup_files(number, req_id, callback)
            markup_files = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)

            bot.answer_callback_query(call.id)

        #–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
        elif 'send_file:' in call.data:
            parts = call.data.split(':')
            id = parts[1]
            type = parts[2]

            file_id = core.get_file_id(id)
            try:
                if type == 'photo':
                    bot.send_photo(call.message.chat.id, photo=file_id, reply_markup=markup.markup_main())
                elif type == 'document':
                    bot.send_document(call.message.chat.id, document=file_id, reply_markup=markup.markup_main())
                elif type == 'video':
                    bot.send_video(call.message.chat.id, video=file_id, reply_markup=markup.markup_main())
                elif type == 'audio':
                    bot.send_audio(call.message.chat.id, audio=file_id, reply_markup=markup.markup_main())
                elif type == 'voice':
                    bot.send_voice(call.message.chat.id, voice=file_id, reply_markup=markup.markup_main())
            
                bot.answer_callback_query(call.id)
            except:
                 bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', parse_mode='html')
        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'back_agent':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())
            except:
                bot.send_message(call.message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

            bot.answer_callback_query(call.id)

        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
        elif call.data == 'back_admin':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', parse_mode='html', reply_markup=markup.markup_admin())
            except:
                bot.send_message(call.message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', parse_mode='html', reply_markup=markup.markup_admin())

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'add_agent':
            take_agent_id_message = bot.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID Telegram.', reply_markup=markup.markup_cancel())
            bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

        #–í—Å–µ –∞–≥–µ–Ω—Ç—ã
        elif 'all_agents:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_agents(number)
            markup_agents = markup_and_value[0]
            len_agents = markup_and_value[1]

            if len_agents == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_agents)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_agents)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif 'delete_agent:' in call.data:
            agent_id = call.data.split(':')[1]
            core.delete_agent(agent_id)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])

            bot.answer_callback_query(call.id)

        #–í—Å–µ –ø–∞—Ä–æ–ª–∏
        elif 'all_passwords:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_passwords(number)
            markup_passwords = markup_and_value[0]
            len_passwords = markup_and_value[1]

            if len_passwords == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_passwords)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_passwords)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å
        elif 'delete_password:' in call.data:
            password = call.data.split(':')[1]
            core.delete_password(password)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏
        elif call.data == 'generate_passwords':
            #10 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π, 16 - –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
            passwords = core.generate_passwords(10, 16) 
            core.add_passwords(passwords)

            text_passwords = ''
            i = 1
            for password in passwords:
                text_passwords += f'{i}. {password}\n'
                i += 1
            
            bot.send_message(call.message.chat.id, f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {i-1} –ø–∞—Ä–æ–ª–µ–π:\n\n{text_passwords}", parse_mode='html', reply_markup=markup.markup_main())
            bot.send_message(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        elif 'stop_bot:' in call.data:
            status = call.data.split(':')[1]

            #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            if status == 'wait':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())
                except:
                    bot.send_message(call.message.chat.id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())

            #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
            elif status == 'confirm':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚úÖ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.')
                except:
                    bot.send_message(chat_id=call.message.chat.id, text='‚úÖ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.')

                bot.answer_callback_query(call.id)
                bot.stop_polling()
                sys.exit()

        elif call.data.startswith('backtovars'):
            items = get_all_items()
            markups = types.InlineKeyboardMarkup(row_width=1)
            for item in items:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
                button = types.InlineKeyboardButton(text=item[1], callback_data=f"view_item_{item[0]}")
                markups.add(button)
            bot.edit_message_text(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=markups, message_id=call.message.id)

        #Callbacks for market_admin
        elif call.data.startswith('give_backup'):
            market_admin.get_backup(call.message)
        elif call.data.startswith('market_admin'):
                bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup.markup_tovars_admin())






if __name__ == "__main__":
    bot.polling(none_stop=True)